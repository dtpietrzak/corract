import type { PagesConfigExtended } from '_types'

import fs from 'node:fs/promises'

type LayoutVariants = Record<string, {
  path: string;
  pageName: string;
  layoutName: string;
  nested: string;
}[]>[]

export const buildAppClient = async(props: {
  extendedPagesConfig: PagesConfigExtended;
}) => {
  const layoutVariants: LayoutVariants = []
  Object.entries(props.extendedPagesConfig).forEach(([pagePath, config]) => {
    if (!config.layouts?.length) {
      if (!layoutVariants[0]) layoutVariants[0] = {}
      const currentPaths = layoutVariants[0][''] || []
      currentPaths.push({ path: pagePath, pageName: config.pageName, nested: '', layoutName: '' })
      layoutVariants[0][''] = currentPaths
      return
    } else {
      if (!layoutVariants[0]) layoutVariants[0] = {}
      const currentPaths = layoutVariants[0][''] || []
      currentPaths.push({
        path: pagePath,
        pageName: config.pageName,
        layoutName: config.layouts[0].name,
        nested: config.layouts[0].name,
      })
      layoutVariants[0][''] = currentPaths
    }
    for (let i = 0; i < config.layouts?.length; i++) {
      if (!layoutVariants[i + 1]) layoutVariants[i + 1] = {}
      const nested = config.layouts[i + 1]
        ? `${config.layouts[i]?.name}_${config.layouts[i + 1]?.name}`
        : ''
      let currentLayout = config.layouts[i]?.name
      for (let j = 0; j < i; j++) {
        const previousLayout = config.layouts[j]?.name
        if (previousLayout) {
          currentLayout = `${previousLayout}_${currentLayout}`
        }
      }
      const currentPaths = layoutVariants[i + 1][currentLayout] || []
      currentPaths.push({
        path: pagePath,
        pageName: config.pageName,
        layoutName: config.layouts[i].name,
        nested: nested,
      })
      layoutVariants[i + 1][currentLayout] = currentPaths
    }
  })
  // an array of all the indiviudal layout components, unique array with no duplicates
  const layouts = Array.from(new Set(Object
    .values(props.extendedPagesConfig)
    .flatMap((config) => config.layouts || [])
    .map((layout) => layout.name))).map((name) => {
    return {
      name,
      filePath: `./layouts/${name}`,
    }
  })

  const pageImports = Object
    .values(props.extendedPagesConfig)
    .map((config) => `import ${config.pageName} from '${config.filePath}'`)
    .join('\n')

  const layoutImports = layouts
    .map((layout) => `import ${layout.name} from '${layout.filePath}'`)
    .join('\n')

  const routeString = (path: string, nested: string, pageName: string) => `<Route pages={pages} page={pages['${path}']} path={pathHandler('${path}')} component={${nested ? `_${nested}` : pageName}}/>`

  const jsx = layoutVariants.map((layoutVariant, i) => {
    if (i === 0) return `export function Client(props?: ClientProps) {
  ssrPagePath = props?.ssrPagePath as string | undefined
  const [currentPath, setCurrentPath] = useState<string | undefined>(ssrPagePath)

  return (
    <ServerStateProvider
      currentPath={currentPath}
      middlewareData={props?.middlewareData}
    >
      <Router onChange={(e) => setCurrentPath(e.url)}>
        ${layoutVariants[0][''].map((layoutVariant) => routeString(layoutVariant.path, layoutVariant.nested, layoutVariant.pageName)).join('\n        ')}
      </Router>
    </ServerStateProvider>
  )
}`

    return `${Object.entries(layoutVariant).map(([currentLayout, layoutConfig]) => `function _${currentLayout}() {
  return (
    <${layoutConfig[0].layoutName}>
      <Router>
        ${layoutConfig.map((layoutConfigItem) => routeString(layoutConfigItem.path, layoutConfigItem.nested, layoutConfigItem.pageName)).join('\n        ')}
      </Router>
    </${layoutConfig[0].layoutName}>
  )
}`)
      .join('\n\n')}`

  }).join('\n\n')


  const content = `/**
 * NOTE: This file is auto-generated by Corract!
 * If you modify it, your changes will be lost on the next dev / build.
 *
 * - App Entry Point -
 *
 * This is the entry point for a Preact application.
 *
 * The current plan is to allow drivers to be set up to use this framework
 * with different ui libraries, routing libraries, state management, etc.
 */

import type { ClientProps } from 'corract'
import { render } from 'preact'
import { useState } from 'preact/hooks'
import { Router, Route } from 'preact-router'
import { ServerStateProvider } from 'corract'

import { pages } from './app-def'

${pageImports}
${layoutImports}

let ssrPagePath: string | undefined
const pathHandler = <T extends keyof typeof pages>(pagePath: T) => {
  if (ssrPagePath) {
    if (ssrPagePath === pagePath) {
      return '/' as typeof pagePath
    } else {
      return '/404' as unknown as typeof pagePath
    }
  } else {
    return pagePath
  }
}

${jsx}

if (typeof window !== 'undefined') {
  render(<Client/>, document.getElementById('app') as HTMLElement)
}
`

  // Write directly to the app's src/app-client.tsx
  await fs.writeFile('src/app-client.tsx', content)
  console.info('Generated src/app-client.tsx')
}
