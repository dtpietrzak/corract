/**
 * NOTE: This file is auto-generated by Corract!
 * If you modify it, your changes will be lost on the next dev / build.
 *
 * - App Entry Point -
 *
 * This is the entry point for a Preact application.
 *
 * The current plan is to allow drivers to be set up to use this framework
 * with different ui libraries, routing libraries, state management, etc.
 */

import type { ClientProps } from 'corract'
import { render } from 'preact'
import { useState } from 'preact/hooks'
import { Router, Route } from 'preact-router'
import { ServerStateProvider } from 'corract'

import { pages } from './app-def'

import Page_ from './pages/'
import Page_profile from './pages/profile'
import Page_profile_demo from './pages/profile/demo'
import Page_profile__id from './pages/profile/(id)'
import Page_tasks from './pages/tasks'
import Page_docs from './pages/docs'
import Navbar from './layouts/Navbar'
import Profile from './layouts/Profile'
import Docs from './layouts/Docs'

let ssrPagePath: string | undefined
const pathHandler = <T extends keyof typeof pages>(pagePath: T) => {
  if (ssrPagePath) {
    if (ssrPagePath === pagePath) {
      return '/' as typeof pagePath
    } else {
      return '/404' as unknown as typeof pagePath
    }
  } else {
    return pagePath
  }
}

export function Client(props?: ClientProps) {
  ssrPagePath = props?.ssrPagePath as string | undefined
  const [currentPath, setCurrentPath] = useState<string | undefined>(ssrPagePath)

  return (
    <ServerStateProvider
      currentPath={currentPath}
      middlewareData={props?.middlewareData}
    >
      <Router onChange={(e) => setCurrentPath(e.url)}>
        <Route pages={pages} page={pages['/']} path={pathHandler('/')} component={_Navbar}/>
        <Route pages={pages} page={pages['/profile']} path={pathHandler('/profile')} component={_Navbar}/>
        <Route pages={pages} page={pages['/profile/demo']} path={pathHandler('/profile/demo')} component={Page_profile_demo}/>
        <Route pages={pages} page={pages['/profile/:id']} path={pathHandler('/profile/:id')} component={_Profile}/>
        <Route pages={pages} page={pages['/tasks']} path={pathHandler('/tasks')} component={_Navbar}/>
        <Route pages={pages} page={pages['/docs']} path={pathHandler('/docs')} component={_Navbar}/>
      </Router>
    </ServerStateProvider>
  )
}

function _Navbar() {
  return (
    <Navbar>
      <Router>
        <Route pages={pages} page={pages['/']} path={pathHandler('/')} component={Page_}/>
        <Route pages={pages} page={pages['/profile']} path={pathHandler('/profile')} component={_Navbar_Profile}/>
        <Route pages={pages} page={pages['/tasks']} path={pathHandler('/tasks')} component={Page_tasks}/>
        <Route pages={pages} page={pages['/docs']} path={pathHandler('/docs')} component={_Navbar_Docs}/>
      </Router>
    </Navbar>
  )
}

function _Profile() {
  return (
    <Profile>
      <Router>
        <Route pages={pages} page={pages['/profile/:id']} path={pathHandler('/profile/:id')} component={Page_profile__id}/>
      </Router>
    </Profile>
  )
}

function _Navbar_Profile() {
  return (
    <Profile>
      <Router>
        <Route pages={pages} page={pages['/profile']} path={pathHandler('/profile')} component={Page_profile}/>
      </Router>
    </Profile>
  )
}

function _Navbar_Docs() {
  return (
    <Docs>
      <Router>
        <Route pages={pages} page={pages['/docs']} path={pathHandler('/docs')} component={Page_docs}/>
      </Router>
    </Docs>
  )
}

if (typeof window !== 'undefined') {
  render(<Client/>, document.getElementById('app') as HTMLElement)
}
